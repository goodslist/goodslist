import { useRouter } from 'next/router'
import { supabase } from '../../../components/supabase'
import Link from 'next/link'
import styles from '../../../styles/Admin.module.css'
import Title from '../../../components/view/title'
import Head from 'next/head'
import { GetServerSideProps } from 'next'
import InputText from '../../../components/form/InputText'
import InputLabel from '../../../components/form/InputLabel'
import SubmitButton from '../../../components/form/SubmitButton'
import Form from '../../../components/form/Form'
import { useEffect, useState } from 'react'
import AdminHeader from '../../../components/admin/Header'
import AdminLogin from '../../../components/admin/login'
import { Contents } from '../../../components/types'
import { GetStaticPropsContext } from 'next'
import { useCsvItems } from '../../../components/hooks/admin/useCsvItems'

type PathParams = {
  event_id: string
}

type ItemEvent = {
  event_id: number
  event_name: string
  content_name: string
}

type newItem = {
  item_id: number
  group: number
  order: number
  item_name: string
  version?: string
  color?: string
  size?: string
  price: number
}

// ページコンポーネントに渡されるデータ
type Props = {
  events: any[]
}

export const getServerSideProps: GetServerSideProps = async (context: GetStaticPropsContext) => {
  const { event_id } = context.params as PathParams

  const { data, error } = await supabase
    .from('events')
    .select('event_id, event_name, contents(content_name)')
    .eq('event_id', event_id)

  const events: ItemEvent[] = []

  console.log(data)

  data?.map((doc) => {
    const event: ItemEvent = {
      event_id: doc.event_id,
      event_name: doc.event_name,
      content_name: doc.contents.content_name,
    }
    events.push(event)
  })

  return { props: { events } }
}
export default function Admin({ events }: Props) {
  const router = useRouter()

  const [csvDragDrop, items] = useCsvItems()
  const [renderEvents, setRenderEvents] = useState<JSX.Element>(<></>)

  useEffect(() => {
    console.log(events)
    if (items.length > 0) renderCsvItems()
  }, [items])

  const register = async () => {
    items.map((item: newItem) => {
      registerItems(item)
    })
    router.push({
      pathname: '/kinakomochi/events', //URL
    })
    alert('登録完了')
  }

  const registerItems = async (item: newItem) => {
    const { data, error } = await supabase
      .from('events')
      .update({ items: items })
      .eq('event_id', events[0].event_id)

    if (error) {
      console.log(error)
    } else {
      // alert('登録完了')
    }
  }

  const renderCsvItems = () => {
    const viewEvents = (
      <>
        <table>
          {items.map((item: newItem, index: number) => (
            <tr>
              <td>{item.item_id}</td>
              <td>{item.group}</td>
              <td>{item.order}</td>
              <td>{item.item_name}</td>
              <td>{item.version}</td>
              <td>{item.color}</td>
              <td>{item.size}</td>
              <td>{item.price}</td>
            </tr>
          ))}
        </table>
        <SubmitButton title='登録' isSubmit={true} onClick={register} />
      </>
    )
    setRenderEvents(viewEvents)
    console.log(items)
  }

  return (
    <>
      <Head>
        <title>Goods List 管理者ログイン</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,maximum-scale=1.0' />
        <link rel='icon' href='/favicon.ico' />
        <link
          href='https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap&text=Goodsist'
          rel='stylesheet'
        />
        <link
          href='https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'
          rel='stylesheet'
        ></link>
      </Head>
      <AdminHeader />
      <div className={styles.wrapper_white}>
        <Title title='アイテムCSV新規登録' />

        {events.map((event: ItemEvent, index: number) => (
          <>
            {event.content_name}
            <br />
            {event.event_name}
          </>
        ))}
        {/* <ContentsCSVReader /> */}
        {csvDragDrop}
        {renderEvents}
      </div>
    </>
  )
}
