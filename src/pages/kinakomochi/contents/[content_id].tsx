import { useRouter } from 'next/router'
import { supabase } from '../../../components/supabase'
import Link from 'next/link'
import styles from '../../../styles/Admin.module.css'
import Title from '../../../components/view/title'
import Head from 'next/head'
import { GetServerSideProps } from 'next'
import InputText from '../../../components/form/InputText'
import InputLabel from '../../../components/form/InputLabel'
import SubmitButton from '../../../components/form/SubmitButton'
import Form from '../../../components/form/Form'
import { useEffect, useState } from 'react'
import AdminHeader from '../../../components/admin/Header'
import AdminLogin from '../../../components/admin/login'
import { Contents } from '../../../components/types'
import { GetStaticPropsContext } from 'next'

type PathParams = {
  content_id: string
}

// ページコンポーネントに渡されるデータ
type Props = {
  contents: Contents[]
}

export const getServerSideProps: GetServerSideProps = async (context: GetStaticPropsContext) => {
  const { content_id } = context.params as PathParams

  const { data, error } = await supabase
    .from('contents')
    .select('content_id, content_name, content_name_hira, content_name_kana')
    .eq('content_id', content_id)

  const contents: Contents[] = []

  data?.map((doc) => {
    const content: Contents = {
      content_id: doc.content_id,
      content_name: doc.content_name,
      content_name_hira: doc.content_name_hira,
      content_name_kana: doc.content_name_kana,
    }
    contents.push(content)
  })

  return { props: { contents } }
}
export default function Admin({ contents }: Props) {
  const router = useRouter()

  const [contentId, setContentId] = useState(contents[0].content_id)
  const [contentName, setContentName] = useState(contents[0].content_name)
  const [contentNameHira, setContentNameHira] = useState(contents[0].content_name_hira)
  const [contentNameKana, setContentNameKana] = useState(contents[0].content_name_kana)
  const [isSubmit, setIsSubmit] = useState(true)

  console.log(contents)

  useEffect(() => {
    console.log(contentId)
    console.log(contentName)
    console.log(contentNameHira)
    console.log(contentNameKana)
  }, [contentId, contentName, contentNameHira, contentNameKana])

  const updateContents = async () => {
    alert('更新')
  }

  const deleteContents = async () => {
    alert('削除')
  }

  return (
    <>
      <Head>
        <title>Goods List 管理者ログイン</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,maximum-scale=1.0' />
        <link rel='icon' href='/favicon.ico' />
        <link
          href='https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap&text=Goodsist'
          rel='stylesheet'
        />
        <link
          href='https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'
          rel='stylesheet'
        ></link>
      </Head>
      <AdminHeader />
      <div className={styles.wrapper_white}>
        <Title title='コンテンツ編集' />
        <div className={styles.input_container}>
          <ul>
            <li>
              <InputLabel label='コンテンツID' />
              <div className={styles.input_text_no}>{contentId}</div>
            </li>
            <li>
              <InputLabel label='コンテンツ名' />
              <InputText value={contentName} onChange={setContentName} />
            </li>
            <li>
              <InputLabel label='コンテンツ名ひらがな' />
              <InputText value={contentNameHira} onChange={setContentNameHira} />
            </li>
            <li>
              <InputLabel label='コンテンツ名カタカナ' />
              <InputText value={contentNameKana} onChange={setContentNameKana} />
            </li>
          </ul>
          <SubmitButton title='更新' isSubmit={isSubmit} onClick={updateContents} />
          <SubmitButton title='削除' isSubmit={isSubmit} onClick={deleteContents} />
        </div>
      </div>
    </>
  )
}

{
  /* <input
className={props.valid ? styles.input_text_validated : styles.input_text}
type={props.type}
name={props.name}
value={props.value}
placeholder={props.placeholder}
onChange={(e) => props.onChange(e.target.value)}
/> */
}
